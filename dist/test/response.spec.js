"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const response_1 = require("../lib/response");
const testInputs = [
    {
        options: {},
        response: { name: 'yes' },
        expectedCode: 200,
        expectedBody: { name: 'yes' }
    },
    {
        options: { successCode: 201 },
        expectedCode: 201,
        expectedBody: {}
    },
    {
        response: { name: 'yes' },
        expectedCode: 200,
        expectedBody: { name: 'yes' }
    }
];
describe('Service response test', async () => {
    it('create response returns an error code when a promise reject', async () => {
        const failedPromise = Promise.reject(new Error('Promise Rejected'));
        const result = await response_1.createResponse(failedPromise);
        chai_1.expect(result.statusCode).to.equal(500);
        const parsedBody = JSON.parse(result.body);
        chai_1.expect(parsedBody).to.deep.equal({ ok: false });
        chai_1.expect(result.headers).ok;
    });
    testInputs.forEach(({ options, response, expectedCode, expectedBody }) => {
        it(`create response returns a success code when a promise resolves with ${JSON.stringify(response)} and options is ${JSON.stringify(options)}`, async () => {
            const successPromise = Promise.resolve(response);
            const result = await response_1.createResponse(successPromise, options);
            chai_1.expect(result.statusCode).to.equal(expectedCode);
            const parsedBody = JSON.parse(result.body);
            chai_1.expect(parsedBody).to.deep.equal(expectedBody);
            chai_1.expect(result.headers).ok;
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2Uuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvcmVzcG9uc2Uuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUE4QjtBQUU5Qiw4Q0FBaUQ7QUFFakQsTUFBTSxVQUFVLEdBQUc7SUFDbEI7UUFDQyxPQUFPLEVBQUUsRUFBRTtRQUNYLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7UUFDekIsWUFBWSxFQUFFLEdBQUc7UUFDakIsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtLQUM3QjtJQUNEO1FBQ0MsT0FBTyxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUM3QixZQUFZLEVBQUUsR0FBRztRQUNqQixZQUFZLEVBQUUsRUFBRTtLQUNoQjtJQUNEO1FBQ0MsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtRQUN6QixZQUFZLEVBQUUsR0FBRztRQUNqQixZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO0tBQzdCO0NBQ0QsQ0FBQztBQUVGLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLElBQUksRUFBRTtJQUM1QyxFQUFFLENBQUMsNkRBQTZELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUUsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDcEUsTUFBTSxNQUFNLEdBQUcsTUFBTSx5QkFBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRW5ELGFBQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxhQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNoRCxhQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUU7UUFDeEUsRUFBRSxDQUFDLHVFQUF1RSxJQUFJLENBQUMsU0FBUyxDQUN2RixRQUFRLENBQ1IsbUJBQW1CLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sTUFBTSxHQUFHLE1BQU0seUJBQWMsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFN0QsYUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2pELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNDLGFBQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQyxhQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHsgY3JlYXRlUmVzcG9uc2UgfSBmcm9tICcuLi9saWIvcmVzcG9uc2UnO1xuXG5jb25zdCB0ZXN0SW5wdXRzID0gW1xuXHR7XG5cdFx0b3B0aW9uczoge30sXG5cdFx0cmVzcG9uc2U6IHsgbmFtZTogJ3llcycgfSxcblx0XHRleHBlY3RlZENvZGU6IDIwMCxcblx0XHRleHBlY3RlZEJvZHk6IHsgbmFtZTogJ3llcycgfVxuXHR9LFxuXHR7XG5cdFx0b3B0aW9uczogeyBzdWNjZXNzQ29kZTogMjAxIH0sXG5cdFx0ZXhwZWN0ZWRDb2RlOiAyMDEsXG5cdFx0ZXhwZWN0ZWRCb2R5OiB7fVxuXHR9LFxuXHR7XG5cdFx0cmVzcG9uc2U6IHsgbmFtZTogJ3llcycgfSxcblx0XHRleHBlY3RlZENvZGU6IDIwMCxcblx0XHRleHBlY3RlZEJvZHk6IHsgbmFtZTogJ3llcycgfVxuXHR9XG5dO1xuXG5kZXNjcmliZSgnU2VydmljZSByZXNwb25zZSB0ZXN0JywgYXN5bmMgKCkgPT4ge1xuXHRpdCgnY3JlYXRlIHJlc3BvbnNlIHJldHVybnMgYW4gZXJyb3IgY29kZSB3aGVuIGEgcHJvbWlzZSByZWplY3QnLCBhc3luYyAoKSA9PiB7XG5cdFx0Y29uc3QgZmFpbGVkUHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignUHJvbWlzZSBSZWplY3RlZCcpKTtcblx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVSZXNwb25zZShmYWlsZWRQcm9taXNlKTtcblxuXHRcdGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG8uZXF1YWwoNTAwKTtcblx0XHRjb25zdCBwYXJzZWRCb2R5ID0gSlNPTi5wYXJzZShyZXN1bHQuYm9keSk7XG5cdFx0ZXhwZWN0KHBhcnNlZEJvZHkpLnRvLmRlZXAuZXF1YWwoeyBvazogZmFsc2UgfSk7XG5cdFx0ZXhwZWN0KHJlc3VsdC5oZWFkZXJzKS5vaztcblx0fSk7XG5cblx0dGVzdElucHV0cy5mb3JFYWNoKCh7IG9wdGlvbnMsIHJlc3BvbnNlLCBleHBlY3RlZENvZGUsIGV4cGVjdGVkQm9keSB9KSA9PiB7XG5cdFx0aXQoYGNyZWF0ZSByZXNwb25zZSByZXR1cm5zIGEgc3VjY2VzcyBjb2RlIHdoZW4gYSBwcm9taXNlIHJlc29sdmVzIHdpdGggJHtKU09OLnN0cmluZ2lmeShcblx0XHRcdHJlc3BvbnNlXG5cdFx0KX0gYW5kIG9wdGlvbnMgaXMgJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX1gLCBhc3luYyAoKSA9PiB7XG5cdFx0XHRjb25zdCBzdWNjZXNzUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVSZXNwb25zZShzdWNjZXNzUHJvbWlzZSwgb3B0aW9ucyk7XG5cblx0XHRcdGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG8uZXF1YWwoZXhwZWN0ZWRDb2RlKTtcblx0XHRcdGNvbnN0IHBhcnNlZEJvZHkgPSBKU09OLnBhcnNlKHJlc3VsdC5ib2R5KTtcblx0XHRcdGV4cGVjdChwYXJzZWRCb2R5KS50by5kZWVwLmVxdWFsKGV4cGVjdGVkQm9keSk7XG5cdFx0XHRleHBlY3QocmVzdWx0LmhlYWRlcnMpLm9rO1xuXHRcdH0pO1xuXHR9KTtcbn0pO1xuIl19